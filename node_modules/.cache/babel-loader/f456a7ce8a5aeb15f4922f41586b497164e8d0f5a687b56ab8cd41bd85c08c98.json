{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\r0gc0\\\\Downloads\\\\Text-Summarizer-main\\\\Text-Summarizer-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Youtube from \"./assets/youtube.png\";\nimport Delete from \"./assets/delete.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [value, setValue] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [flashcards, setFlashcards] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  const [copiedIndex, setCopiedIndex] = useState(null);\n  const [error, setError] = useState(null);\n  const [showFlashcards, setShowFlashcards] = useState(false);\n\n  // Handle form submission to summarize content\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!value.trim()) {\n      alert(\"Please provide valid text to summarize.\");\n      return;\n    }\n    setSubmitting(true);\n    setError(null);\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: `Extract the main points from the following text and turn them into questions that a student can use for study purposes:\\n\\n${value}`\n          }]\n        }]\n      })\n    };\n    try {\n      var _dt$candidates, _dt$candidates$, _dt$candidates$$conte, _dt$candidates$$conte2, _dt$candidates$$conte3, _dt$candidates$$conte4;\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY`, requestOptions);\n      if (!response.ok) throw new Error(\"Failed to fetch summary\");\n      const dt = await response.json();\n      const text = (_dt$candidates = dt.candidates) === null || _dt$candidates === void 0 ? void 0 : (_dt$candidates$ = _dt$candidates[0]) === null || _dt$candidates$ === void 0 ? void 0 : (_dt$candidates$$conte = _dt$candidates$.content) === null || _dt$candidates$$conte === void 0 ? void 0 : (_dt$candidates$$conte2 = _dt$candidates$$conte.parts) === null || _dt$candidates$$conte2 === void 0 ? void 0 : (_dt$candidates$$conte3 = _dt$candidates$$conte2[0]) === null || _dt$candidates$$conte3 === void 0 ? void 0 : (_dt$candidates$$conte4 = _dt$candidates$$conte3.text) === null || _dt$candidates$$conte4 === void 0 ? void 0 : _dt$candidates$$conte4.trim();\n      if (!text) throw new Error(\"Invalid response from Gemini.\");\n      const newSummary = {\n        text\n      };\n      setData([newSummary, ...data]);\n\n      // Save the summary to MongoDB\n      await fetch(\"http://localhost:5000/summaries\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newSummary)\n      });\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Summarization error:\", err);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Fetch data from MongoDB\n  const fetchLocalStorage = async () => {\n    try {\n      const summaryResponse = await fetch(\"http://localhost:5000/summaries\");\n      const flashcardResponse = await fetch(\"http://localhost:5000/flashcards\");\n      const summaries = await summaryResponse.json();\n      const flashcards = await flashcardResponse.json();\n      setData(summaries);\n      setFlashcards(flashcards);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Add to flashcards\n  const addToFlashcards = async summary => {\n    const newFlashcard = {\n      summary: summary.text\n    };\n    const updatedFlashcards = [newFlashcard, ...flashcards];\n    setFlashcards(updatedFlashcards);\n    await fetch(\"http://localhost:5000/flashcards\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newFlashcard)\n    });\n  };\n\n  // Delete flashcard\n  const deleteFlashcard = async id => {\n    const updatedFlashcards = flashcards.filter(card => card._id !== id);\n    setFlashcards(updatedFlashcards);\n    await fetch(`http://localhost:5000/flashcards/${id}`, {\n      method: \"DELETE\"\n    });\n  };\n\n  // Copy text to clipboard\n  const copyTextToClipboard = async (text, index) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 1500);\n    } catch (err) {\n      console.error(\"Failed to copy text:\", err);\n      alert(\"Could not copy text to clipboard.\");\n    }\n  };\n  useEffect(() => {\n    fetchLocalStorage();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full bg-[#0f172a] h-full min-h-[100vh] py-4 px-4 md:px-20\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"iCdLgOllz0lp1kfxL/1aADVl6aM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Youtube","Delete","jsxDEV","_jsxDEV","App","_s","value","setValue","data","setData","flashcards","setFlashcards","submitting","setSubmitting","copiedIndex","setCopiedIndex","error","setError","showFlashcards","setShowFlashcards","handleSubmit","e","preventDefault","trim","alert","requestOptions","method","headers","body","JSON","stringify","contents","parts","text","_dt$candidates","_dt$candidates$","_dt$candidates$$conte","_dt$candidates$$conte2","_dt$candidates$$conte3","_dt$candidates$$conte4","response","fetch","ok","Error","dt","json","candidates","content","newSummary","err","message","console","fetchLocalStorage","summaryResponse","flashcardResponse","summaries","addToFlashcards","summary","newFlashcard","updatedFlashcards","deleteFlashcard","id","filter","card","_id","copyTextToClipboard","index","navigator","clipboard","writeText","setTimeout","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/r0gc0/Downloads/Text-Summarizer-main/Text-Summarizer-main/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Youtube from \"./assets/youtube.png\";\nimport Delete from \"./assets/delete.png\";\n\nfunction App() {\n  const [value, setValue] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [flashcards, setFlashcards] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  const [copiedIndex, setCopiedIndex] = useState(null);\n  const [error, setError] = useState(null);\n  const [showFlashcards, setShowFlashcards] = useState(false);\n\n  // Handle form submission to summarize content\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!value.trim()) {\n      alert(\"Please provide valid text to summarize.\");\n      return;\n    }\n\n    setSubmitting(true);\n    setError(null);\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: `Extract the main points from the following text and turn them into questions that a student can use for study purposes:\\n\\n${value}`\n          }]\n        }]\n      }),\n    };\n\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY`, requestOptions);\n      if (!response.ok) throw new Error(\"Failed to fetch summary\");\n      const dt = await response.json();\n      const text = dt.candidates?.[0]?.content?.parts?.[0]?.text?.trim();\n      if (!text) throw new Error(\"Invalid response from Gemini.\");\n\n      const newSummary = { text };\n      setData([newSummary, ...data]);\n\n      // Save the summary to MongoDB\n      await fetch(\"http://localhost:5000/summaries\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newSummary),\n      });\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Summarization error:\", err);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Fetch data from MongoDB\n  const fetchLocalStorage = async () => {\n    try {\n      const summaryResponse = await fetch(\"http://localhost:5000/summaries\");\n      const flashcardResponse = await fetch(\"http://localhost:5000/flashcards\");\n\n      const summaries = await summaryResponse.json();\n      const flashcards = await flashcardResponse.json();\n\n      setData(summaries);\n      setFlashcards(flashcards);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Add to flashcards\n  const addToFlashcards = async (summary) => {\n    const newFlashcard = {\n      summary: summary.text,\n    };\n    const updatedFlashcards = [newFlashcard, ...flashcards];\n    setFlashcards(updatedFlashcards);\n\n    await fetch(\"http://localhost:5000/flashcards\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(newFlashcard),\n    });\n  };\n\n  // Delete flashcard\n  const deleteFlashcard = async (id) => {\n    const updatedFlashcards = flashcards.filter((card) => card._id !== id);\n    setFlashcards(updatedFlashcards);\n\n    await fetch(`http://localhost:5000/flashcards/${id}`, { method: \"DELETE\" });\n  };\n\n  // Copy text to clipboard\n  const copyTextToClipboard = async (text, index) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 1500);\n    } catch (err) {\n      console.error(\"Failed to copy text:\", err);\n      alert(\"Could not copy text to clipboard.\");\n    }\n  };\n\n  useEffect(() => {\n    fetchLocalStorage();\n  }, []);\n\n  return (\n    <div className=\"w-full bg-[#0f172a] h-full min-h-[100vh] py-4 px-4 md:px-20\">\n      {/* Your existing JSX structure remains here */}\n      {/* Add other sections for showing summaries, flashcards, and interacting with them */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}